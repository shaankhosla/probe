name: Release Pipeline
on:
  push:
    tags:
      - "v*" # Trigger on tags like "v1.0.0"

jobs:
  build:
    name: Build and Package Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         include:
          # - os: ubuntu-latest
          #   goos: linux
          #   goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64   
    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "go.sum"

      # Step 3: Platform-specific tool installation
      # Only on Linux runners, we may need additional tools for cross-compilation.
      - name: Install Cross-Build Tools (Linux Only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y \
              build-essential \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libc6-dev-arm64-cross \
              libstdc++6-arm64-cross

      # Step 4: Compile binary
      - name: Build Binary
        run: |
          mkdir -p output
          # Conditionally set CC for Linux; macOS uses clang implicitly
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o output/probe-${{ matrix.goos }}-${{ matrix.goarch }} main.go

      # Step 5: Archive the binary (zip/tar.gz)
      - name: Archive Binaries
        run: |
          cd output
          for file in *; do
            if [[ "$file" == *.exe ]]; then
              zip "${file}.zip" "$file"
            else
              tar -czf "$file.tar.gz" "$file"
            fi
          done

      # Step 6: Upload artifacts to GitHub Actions for later use
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./output/*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Download all build artifacts
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release-assets

      # Step 2: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Upload Release Assets
      - name: Upload Assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: './release-assets/**/*'
